#Hern√°ndez Renter√≠a Jorge Andr√©s 4¬∞B Cl√°sica
"""
PATR√ìN FACTORY - F√°brica de Notificaciones
Prop√≥sito: Centralizar la creaci√≥n de objetos. En lugar de crear objetos directamente,
usamos una f√°brica que decide qu√© tipo de objeto crear.
"""

from abc import ABC, abstractmethod

# Paso 1: Crear una interfaz com√∫n para todos los productos
class Notificacion(ABC):
    @abstractmethod
    def enviar(self, mensaje: str):
        pass

# Paso 2: Crear implementaciones concretas
class EmailNotificacion(Notificacion):
    def enviar(self, mensaje: str):
        print(f"üìß Enviando EMAIL: {mensaje}")

class SMSNotificacion(Notificacion):
    def enviar(self, mensaje: str):
        print(f"üì± Enviando SMS: {mensaje}")

class PushNotificacion(Notificacion):
    def enviar(self, mensaje: str):
        print(f"üîî Enviando PUSH: {mensaje}")

# Paso 3: Crear la F√ÅBRICA
class FabricaNotificaciones:
    """
    La f√°brica es como un men√∫ de restaurante:
    - T√∫ pides "email", "sms" o "push"
    - La f√°brica te da el objeto correcto
    - No necesitas saber c√≥mo se crea cada uno
    """
    
    def crear_notificacion(self, tipo: str) -> Notificacion:
        if tipo == "email":
            return EmailNotificacion()
        elif tipo == "sms":
            return SMSNotificacion()
        elif tipo == "push":
            return PushNotificacion()
        else:
            raise ValueError("Tipo de notificaci√≥n no v√°lido")

# Paso 4: Usar la f√°brica
def demo_factory():
    print("üîß DEMO PATR√ìN FACTORY")
    print("=" * 40)
    
    fabrica = FabricaNotificaciones()
    
    # Pedimos notificaciones a la f√°brica
    email = fabrica.crear_notificacion("email")
    sms = fabrica.crear_notificacion("sms")
    push = fabrica.crear_notificacion("push")
    
    # Usamos las notificaciones sin saber su tipo concreto
    email.enviar("¬°Bienvenido al banco!")
    sms.enviar("C√≥digo de verificaci√≥n: 123456")
    push.enviar("Tienes una transferencia pendiente")

""" 
üí° VENTAJAS DEL FACTORY:
‚Ä¢ Oculta la complejidad de creaci√≥n
‚Ä¢ F√°cil agregar nuevos tipos (WhatsApp, Telegram)
‚Ä¢ C√≥digo m√°s limpio y mantenible
"""

demo_factory()

"""
PATR√ìN OBSERVER - Sistema de Alertas Bancarias
Prop√≥sito: Notificar autom√°ticamente a m√∫ltiples objetos cuando algo cambia.
Como una lista de suscriptores que reciben notificaciones.
"""

from abc import ABC, abstractmethod
from typing import List

# Paso 1: Definir el Observador (quien recibe notificaciones)
class Observador(ABC):
    @abstractmethod
    def actualizar(self, mensaje: str):
        pass

# Paso 2: Implementar observadores concretos
class Cliente(Observador):
    def __init__(self, nombre: str):
        self.nombre = nombre
    
    def actualizar(self, mensaje: str):
        print(f"üë§ {self.nombre} recibi√≥: {mensaje}")

class DepartamentoFraude(Observador):
    def actualizar(self, mensaje: str):
        if "sospechosa" in mensaje.lower():
            print(f"üö® DEPARTAMENTO FRAUDE - ALERTA: {mensaje}")

class Auditoria(Observador):
    def actualizar(self, mensaje: str):
        print(f"üìä AUDITOR√çA registr√≥: {mensaje}")

# Paso 3: Crear el Subject (quien notifica)
class CuentaBancaria:
    """
    El Subject es como un YouTuber:
    - Tiene suscriptores (observadores)
    - Cuando publica nuevo contenido (cambia estado), notifica a todos
    """
    
    def __init__(self, numero: str):
        self.numero = numero
        self.saldo = 0
        self.observadores: List[Observador] = []  # Lista de suscriptores
    
    def agregar_observador(self, observador: Observador):
        """Agregar un nuevo suscriptor"""
        self.observadores.append(observador)
    
    def eliminar_observador(self, observador: Observador):
        """Eliminar un suscriptor"""
        self.observadores.remove(observador)
    
    def notificar_observadores(self, mensaje: str):
        """Notificar a TODOS los suscriptores"""
        for observador in self.observadores:
            observador.actualizar(mensaje)
    
    def depositar(self, monto: float):
        """Cuando depositamos, notificamos a todos"""
        self.saldo += monto
        mensaje = f"Dep√≥sito de ${monto} en cuenta {self.numero}. Saldo: ${self.saldo}"
        self.notificar_observadores(mensaje)
    
    def retirar(self, monto: float):
        """Cuando retiramos, notificamos a todos"""
        if monto > self.saldo:
            mensaje = f"INTENTO DE RETIRO SOSPECHOSO de ${monto} en cuenta {self.numero}"
        else:
            self.saldo -= monto
            mensaje = f"Retiro de ${monto} en cuenta {self.numero}. Saldo: ${self.saldo}"
        
        self.notificar_observadores(mensaje)

# Paso 4: Usar el patr√≥n Observer
def demo_observer():
    print("\nüëÄ DEMO PATR√ìN OBSERVER")
    print("=" * 40)
    
    # Crear cuenta bancaria
    cuenta = CuentaBancaria("123-456")
    
    # Crear observadores (suscriptores)
    cliente = Cliente("Juan P√©rez")
    fraude = DepartamentoFraude()
    auditoria = Auditoria()
    
    # Suscribir observadores a la cuenta
    cuenta.agregar_observador(cliente)
    cuenta.agregar_observador(fraude)
    cuenta.agregar_observador(auditoria)
    
    print("üí≥ Realizando transacciones...")
    
    # Las transacciones notificar√°n autom√°ticamente a todos
    cuenta.depositar(1000)
    cuenta.retirar(200)
    cuenta.retirar(5000)  # Transacci√≥n sospechosa

"""
üí° VENTAJAS DEL OBSERVER:
‚Ä¢ Desacopla el objeto que cambia de los que reaccionan
‚Ä¢ F√°cil agregar nuevos observadores
‚Ä¢ Notificaciones autom√°ticas en tiempo real
"""

demo_observer()

"""
Patr√≥n FACTORY:
Problema: Cuando crear objetos es complejo o puede cambiar

Soluci√≥n: Una f√°brica centralizada que crea objetos

Analog√≠a: Men√∫ de restaurante - pides "pizza" y te la traen sin saber cocinarla

Ventajas: C√≥digo m√°s limpio, f√°cil mantenimiento, oculta complejidad

Patr√≥n OBSERVER:
Problema: Cuando un cambio debe notificar a muchos objetos

Soluci√≥n: Sistema de suscripci√≥n donde objetos se registran para recibir notificaciones

Analog√≠a: Suscripci√≥n a YouTube - cuando suben video, todos los suscriptores son notificados

Ventajas: Desacoplamiento, notificaciones autom√°ticas, f√°cil escalar

¬øCu√°ndo usar cada uno?
FACTORY: Cuando la creaci√≥n de objetos es compleja o puede variar

OBSERVER: Cuando un cambio de estado debe notificar a m√∫ltiples componentes
"""